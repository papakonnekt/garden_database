# Docker Compose configuration for Garden Database

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    # No ports exposed by default, add if needed for external debugging
    # ports:
    #   - "6379:6379"

  celery:
    build: ./app
    restart: always
    working_dir: /app/garden_db_project
    command: celery -A garden_db_project.celery worker --loglevel=info
    volumes:
      - ./app:/app
    env_file:
      - .env
    environment:
      # Inherit necessary env vars from .env via env_file
      # Explicitly define Celery broker URL and DB URL
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Include other necessary env vars if worker needs them (like SECRET_KEY)
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      redis:
        condition: service_started # Assuming redis starts quickly enough
      db:
        condition: service_healthy

  web:
    build: ./app
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started # Add dependency for web service
    volumes:
      - ./app:/app
      - static_volume:/app/garden_db_project/static
      - media_volume:/app/garden_db_project/media
      - ./jsons:/jsons
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - FIRST_RUN=${FIRST_RUN:-true}
    ports:
      - "8000:8000"
    command: >
      bash -c "cd garden_db_project &&
               python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               python manage.py runserver 0.0.0.0:8000"

volumes:
  postgres_data:
  static_volume:
  media_volume:
