# Generated by Django 4.2.7 on 2025-04-18 16:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanionPlantingInteraction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('interaction_code', models.CharField(default='DEFAULT_CODE', help_text='Unique code, e.g., PEST_REPEL_APHID', max_length=100, unique=True)),
                ('interaction_type', models.CharField(choices=[('BEN', 'Beneficial'), ('DET', 'Detrimental'), ('NEU', 'Neutral')], default='NEU', help_text='Type of interaction (beneficial, detrimental, neutral)', max_length=3)),
                ('mechanism_description', models.TextField(blank=True, help_text='Explanation of how the interaction works', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Companion Planting Interaction',
                'verbose_name_plural': 'Companion Planting Interactions',
            },
        ),
        migrations.CreateModel(
            name='Companionship',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('strength_confidence', models.CharField(blank=True, choices=[('HI', 'High'), ('ME', 'Medium'), ('LO', 'Low'), ('AN', 'Anecdotal')], max_length=2, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this specific pairing', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interactions', models.ManyToManyField(help_text='Specific interaction mechanisms (reason codes)', related_name='plant_pairings', to='horticulture.companionplantinginteraction')),
            ],
            options={
                'verbose_name': 'Companionship',
                'verbose_name_plural': 'Companionships',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('common_name', models.CharField(default='Unknown Disease', help_text='Common name of the disease', max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, help_text='Optional scientific name (e.g., for fungus/bacteria)', max_length=100, null=True)),
                ('category', models.CharField(blank=True, choices=[('FUN', 'Fungal'), ('BAC', 'Bacterial'), ('INS', 'Insect'), ('VIR', 'Viral'), ('DEF', 'Nutrient Deficiency'), ('MAM', 'Mammal'), ('MOL', 'Mollusk'), ('ENV', 'Environmental'), ('OTH', 'Other'), ('UNK', 'Unknown')], help_text='Category of the disease', max_length=3, null=True)),
                ('cause', models.CharField(blank=True, help_text="Specific cause if known (e.g., 'Alternaria solani')", max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the disease', null=True)),
                ('symptoms', models.TextField(blank=True, help_text='Symptoms caused by the disease', null=True)),
                ('treatment_strategies', models.JSONField(blank=True, default=list, help_text='Array of treatment strategies (organic and conventional)')),
                ('prevention_strategies', models.JSONField(blank=True, default=list, help_text='Array of prevention strategies')),
                ('image_url', models.URLField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fertilizer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('fertilizer_name', models.CharField(default='Unknown Fertilizer', help_text='Name of the fertilizer', max_length=150)),
                ('brand', models.CharField(blank=True, max_length=100, null=True)),
                ('base_type', models.CharField(blank=True, choices=[('ORG', 'Organic'), ('SYN', 'Synthetic'), ('MIN', 'Mineral'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('form', models.CharField(blank=True, choices=[('LIQ', 'Liquid'), ('GRA', 'Granular'), ('POW', 'Powder'), ('SLO', 'Slow-Release'), ('FOL', 'Foliar'), ('SPI', 'Spike'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('npk_ratio', models.CharField(blank=True, help_text="NPK ratio as string (e.g., '10-10-10', '5-2-3+Fe')", max_length=30, null=True)),
                ('micronutrient_composition', models.JSONField(blank=True, default=list, help_text="Array of objects for micronutrients, e.g., [{'nutrient': 'Iron (Fe)', 'value': 0.5, 'unit': '%'}]")),
                ('application_rate', models.JSONField(blank=True, default=list, help_text="Array of objects for application rates, e.g., [{'value': 1, 'unit': 'oz/gallon', 'context': 'foliar spray'}]")),
                ('application_timing_frequency', models.TextField(blank=True, help_text="Recommended timing/frequency (e.g., 'Every 2 weeks during growing season')", null=True)),
                ('recommended_for', models.TextField(blank=True, help_text="Recommended plant types or stages (e.g., 'Acid-loving plants', 'Vegetable gardens')", null=True)),
                ('compatibility_notes', models.TextField(blank=True, help_text="Compatibility issues (e.g., 'Do not mix with X')", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('common_name', models.CharField(default='Unknown Pest', help_text='Common name of the pest', max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.CharField(choices=[('FUN', 'Fungal'), ('BAC', 'Bacterial'), ('INS', 'Insect'), ('VIR', 'Viral'), ('DEF', 'Nutrient Deficiency'), ('MAM', 'Mammal'), ('MOL', 'Mollusk'), ('ENV', 'Environmental'), ('OTH', 'Other'), ('UNK', 'Unknown')], default='INS', help_text='Category of the pest', max_length=3)),
                ('description', models.TextField(blank=True, help_text='Description of the pest, lifecycle, etc.', null=True)),
                ('symptoms', models.TextField(blank=True, help_text='Symptoms caused by the pest', null=True)),
                ('treatment_strategies', models.JSONField(blank=True, default=list, help_text='Array of treatment strategies (organic and conventional)')),
                ('prevention_strategies', models.JSONField(blank=True, default=list, help_text='Array of prevention strategies')),
                ('image_url', models.URLField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('scientific_name', models.CharField(default='Unknown Species', help_text='Unique scientific name (Genus species)', max_length=255, unique=True)),
                ('common_name', models.CharField(default='Unknown Plant', help_text='Primary common name', max_length=150)),
                ('common_names_list', models.JSONField(blank=True, default=list, help_text='Array of alternative common names')),
                ('family', models.CharField(blank=True, max_length=100, null=True)),
                ('genus', models.CharField(blank=True, max_length=100, null=True)),
                ('species', models.CharField(blank=True, max_length=100, null=True)),
                ('subspecies_cultivar', models.CharField(blank=True, help_text='Subspecies or cultivar name, if applicable', max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('lifecycle_type', models.CharField(blank=True, choices=[('AN', 'Annual'), ('PE', 'Perennial'), ('BI', 'Biennial')], max_length=2, null=True)),
                ('lifecycle_details', models.TextField(blank=True, help_text='Optional descriptive text about lifecycle', null=True)),
                ('plant_type', models.CharField(blank=True, help_text='General type like Vegetable, Herb, Flower', max_length=50, null=True)),
                ('soil_ph_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum preferred soil pH', max_digits=4, null=True)),
                ('soil_ph_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum preferred soil pH', max_digits=4, null=True)),
                ('moisture_requirements', models.CharField(blank=True, choices=[('LO', 'Low'), ('MO', 'Moderate'), ('HI', 'High'), ('BO', 'Boggy')], max_length=2, null=True)),
                ('sunlight_requirements', models.CharField(blank=True, choices=[('FS', 'Full Sun'), ('PS', 'Partial Sun'), ('SH', 'Partial Shade'), ('FD', 'Full Shade')], max_length=2, null=True)),
                ('temperature_tolerance_min_f', models.IntegerField(blank=True, help_text='Minimum hardy temperature in Fahrenheit', null=True)),
                ('temperature_tolerance_max_f', models.IntegerField(blank=True, help_text='Maximum hardy temperature in Fahrenheit', null=True)),
                ('npk_preference', models.CharField(blank=True, help_text="Base NPK needs (e.g., '5-10-5', 'High N, Moderate P, Low K')", max_length=100, null=True)),
                ('growth_stage_specific_npk', models.JSONField(blank=True, default=dict, help_text="Object for stage-specific NPK needs, e.g., {'seedling': '...', 'vegetative': '...'}")),
                ('micronutrient_needs_desc', models.TextField(blank=True, help_text="Descriptive micronutrient needs (e.g., 'Sensitive to boron deficiency')", null=True)),
                ('growth_habit', models.CharField(blank=True, choices=[('VI', 'Vine'), ('SH', 'Shrub'), ('TR', 'Tree'), ('GC', 'Groundcover'), ('HB', 'Herbaceous'), ('BU', 'Bulb')], max_length=2, null=True)),
                ('variant_details', models.JSONField(blank=True, default=list, help_text="Array of objects describing variants, e.g., [{'variant_type': 'Determinate', 'description': '...'}]")),
                ('avg_height_inches', models.DecimalField(blank=True, decimal_places=2, help_text='Typical mature height range in inches', max_digits=6, null=True)),
                ('avg_spread_inches', models.DecimalField(blank=True, decimal_places=2, help_text='Typical mature lateral spread range in inches', max_digits=6, null=True)),
                ('root_system_type', models.CharField(blank=True, help_text='e.g., Shallow Fibrous, Deep Taproot', max_length=100, null=True)),
                ('additional_morphological_traits', models.JSONField(blank=True, default=dict, help_text="Object for additional traits like {'leaf_type': '...', 'stem_characteristics': '...', 'branching_pattern': '...'}")),
                ('germination_period_days_min', models.IntegerField(blank=True, help_text='Typical minimum days for germination', null=True)),
                ('germination_period_days_max', models.IntegerField(blank=True, help_text='Typical maximum days for germination', null=True)),
                ('days_to_maturity_min', models.IntegerField(blank=True, help_text='Minimum days from seed/transplant to first harvest/flowering', null=True)),
                ('days_to_maturity_max', models.IntegerField(blank=True, help_text='Maximum days from seed/transplant to first harvest/flowering', null=True)),
                ('yield_estimates', models.TextField(blank=True, help_text="Descriptive yield estimates (e.g., 'lbs per plant', 'fruits per sq ft')", null=True)),
                ('harvest_seasonality', models.TextField(blank=True, help_text="Typical harvest season (e.g., 'Early Summer', 'Fall', 'Year-round zones 9+')", null=True)),
                ('image_url', models.URLField(blank=True, max_length=255, null=True)),
                ('version', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('companions', models.ManyToManyField(related_name='companion_to', through='horticulture.Companionship', to='horticulture.plant')),
            ],
        ),
        migrations.CreateModel(
            name='SoilProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Default Soil Profile', help_text="Unique name for the soil profile (e.g., 'Generic Clay Loam')", max_length=100, unique=True)),
                ('soil_type', models.CharField(blank=True, choices=[('CL', 'Clay'), ('SA', 'Sandy'), ('SI', 'Silty'), ('LO', 'Loam'), ('PE', 'Peaty'), ('CH', 'Chalky'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('structure', models.CharField(blank=True, choices=[('GR', 'Granular'), ('BL', 'Blocky'), ('PL', 'Platy'), ('MA', 'Massive'), ('SG', 'Single-grained'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('ph_min', models.DecimalField(blank=True, decimal_places=2, help_text='Typical minimum pH value', max_digits=4, null=True)),
                ('ph_max', models.DecimalField(blank=True, decimal_places=2, help_text='Typical maximum pH value', max_digits=4, null=True)),
                ('drainage', models.CharField(blank=True, choices=[('PO', 'Poor'), ('MO', 'Moderate'), ('GO', 'Good'), ('EX', 'Excessive'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('moisture_retention', models.CharField(blank=True, choices=[('LO', 'Low'), ('ME', 'Medium'), ('HI', 'High'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('organic_matter_content', models.CharField(blank=True, choices=[('LO', 'Low'), ('ME', 'Medium'), ('HI', 'High'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('description', models.TextField(blank=True, help_text='General description of the soil profile', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserContribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(default='plant', help_text="Type of entity being contributed (e.g., 'plant', 'seed', 'tip')", max_length=50)),
                ('entity_id', models.CharField(blank=True, max_length=50, null=True)),
                ('proposed_data', models.JSONField(default=dict, help_text='JSON data containing the proposed changes or additions')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Current status of the contribution', max_length=20)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_contributions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Seed',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('seed_name', models.CharField(default='Unknown Seed', help_text="Specific seed name, often includes variety (e.g., 'Beefsteak Tomato Seeds')", max_length=150)),
                ('variety', models.CharField(blank=True, help_text="Specific variety name (e.g., 'Beefsteak')", max_length=100, null=True)),
                ('source_brand', models.CharField(blank=True, help_text='Source or brand of the seeds', max_length=100, null=True)),
                ('catalogue_id', models.CharField(blank=True, help_text='Optional catalogue ID from the source', max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('germination_rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Expected germination rate percentage', max_digits=5, null=True)),
                ('viability_period_months', models.IntegerField(blank=True, help_text='Typical viability period in months under optimal storage', null=True)),
                ('storage_conditions', models.TextField(blank=True, help_text="Recommended storage conditions (e.g., 'Cool, dark, dry place')", null=True)),
                ('seed_type', models.CharField(blank=True, choices=[('H', 'Heirloom'), ('F1', 'Hybrid (F1)'), ('OP', 'Open-Pollinated'), ('GMO', 'Genetically Modified'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('optimal_planting_season', models.TextField(blank=True, help_text="Recommended planting season(s) (e.g., 'Spring after last frost')", null=True)),
                ('days_to_germ_min', models.IntegerField(blank=True, help_text='Minimum days to germination', null=True)),
                ('days_to_germ_max', models.IntegerField(blank=True, help_text='Maximum days to germination', null=True)),
                ('planting_depth_inches', models.DecimalField(blank=True, decimal_places=2, help_text='Recommended planting depth in inches', max_digits=4, null=True)),
                ('spacing_inches', models.DecimalField(blank=True, decimal_places=2, help_text='Recommended spacing between plants in inches', max_digits=5, null=True)),
                ('sowing_instructions_text', models.TextField(blank=True, help_text='Detailed sowing instructions', null=True)),
                ('recommended_conditions', models.TextField(blank=True, help_text="Special conditions (e.g., 'Requires light for germination', 'Needs scarification')", null=True)),
                ('packet_info', models.JSONField(blank=True, help_text='Other info from packet (e.g., year packed, quantity, lot number)', null=True)),
                ('image_url', models.URLField(blank=True, max_length=255, null=True)),
                ('version', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plant', models.ForeignKey(help_text='The plant species this seed belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seeds', to='horticulture.plant')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Optional descriptive name for the region/zone', max_length=100, null=True)),
                ('zone_system', models.CharField(default='USDA Hardiness Zones', help_text="The zoning system used (e.g., 'USDA Hardiness Zones')", max_length=50)),
                ('zone_identifier', models.CharField(default='Unknown', help_text="The specific zone identifier within the system (e.g., '7a', '9b')", max_length=20)),
                ('description', models.TextField(blank=True, help_text="Description of the zone (e.g., 'Average minimum winter temperature 0 to 5 °F')", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Climatic Region/Zone',
                'verbose_name_plural': 'Climatic Regions/Zones',
                'unique_together': {('zone_system', 'zone_identifier')},
            },
        ),
        migrations.CreateModel(
            name='PlantPest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='horticulture.pest')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='horticulture.plant')),
            ],
            options={
                'verbose_name': 'Plant Pest',
                'verbose_name_plural': 'Plant Pests',
                'unique_together': {('plant', 'pest')},
            },
        ),
        migrations.CreateModel(
            name='PlantDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='horticulture.disease')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='horticulture.plant')),
            ],
            options={
                'verbose_name': 'Plant Disease',
                'verbose_name_plural': 'Plant Diseases',
                'unique_together': {('plant', 'disease')},
            },
        ),
        migrations.AddField(
            model_name='plant',
            name='diseases',
            field=models.ManyToManyField(related_name='plants', through='horticulture.PlantDisease', to='horticulture.disease'),
        ),
        migrations.AddField(
            model_name='plant',
            name='pests',
            field=models.ManyToManyField(related_name='plants', through='horticulture.PlantPest', to='horticulture.pest'),
        ),
        migrations.AddField(
            model_name='plant',
            name='soil_preference',
            field=models.ForeignKey(blank=True, help_text='Link to preferred general soil profile(s)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_by_plants', to='horticulture.soilprofile'),
        ),
        migrations.AddField(
            model_name='plant',
            name='suitable_region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plants', to='horticulture.region'),
        ),
        migrations.AddField(
            model_name='companionship',
            name='plant_object',
            field=models.ForeignKey(blank=True, help_text='The plant this relationship targets', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companion_relationships_object', to='horticulture.plant'),
        ),
        migrations.AddField(
            model_name='companionship',
            name='plant_subject',
            field=models.ForeignKey(blank=True, help_text='The plant this relationship originates from', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companion_relationships_subject', to='horticulture.plant'),
        ),
        migrations.AlterUniqueTogether(
            name='companionship',
            unique_together={('plant_subject', 'plant_object')},
        ),
    ]
